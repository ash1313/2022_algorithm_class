{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"과제 10","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hKVgJrMMogSb","executionInfo":{"status":"ok","timestamp":1652342866811,"user_tz":-540,"elapsed":249,"user":{"displayName":"안효준","userId":"15869666014845161131"}},"outputId":"6045db8b-f6e5-4a13-b0f7-49036539d251"},"outputs":[{"output_type":"stream","name":"stdout","text":["23\n","-1\n"]}],"source":["#[문제 1]호스풀 알고리즘 구현 및 테스트\n","NO_OF_CHARS = 128\n","def shift_table(pat): #호스풀 알고리즘 시프트 테이블\n","  m = len(pat)  #패턴 길이\n","  tbl = [m]* NO_OF_CHARS  # 시프트 테이블\n","  for i in range(m-1):  # 패턴의 모든 문자\n","    tbl[ord(pat[i])] = m-1-i  #알파벳이 몇번째 문자인지 \n","  return tbl  #시프트 테이블 반환\n","\n","def search_horspool(T,P):\n","  m = len(P)  #패턴 길이\n","  n = len(T)  #텍스트 길이\n","  t = shift_table(P)  #시프트 테이블\n","  i = m-1 #패턴 가장 오른쪽 문자 위치\n","  while(i <= n-1):  #모든 위치에 대해서\n","    k = 0 #매칭 개수 초기화\n","    while k <= m-1 and P[m-1-k] == T[i-k]: #뒤에서 앞으로 검색하며 맞으면\n","      k+=1 # 앞으로 진행\n","    if k == m : # 매칭성공\n","      return i-m+1 # 반환\n","    else : #매칭실패\n","      tc = t[ord(T[i-k])] #몇번째 문자인지\n","      i+=(tc-k) #건너뜀\n","  return -1 #매칭 실패 반환\n","  \n","print(search_horspool(\"I_LOVE_BANANA_YOU_LIKE_APPLE_AND_MANGO\",\"APPLE\")) #연습문제 14\n","print(search_horspool(\"TTATAGATCTCGTATTCTTTTATAGATCTCCTATTCTT\",\"ACGT\")) #연습문제 15\n"]},{"cell_type":"code","source":["#[보너스 문제]보이어-무어 알고리즘 전체 구현\n","def preprocess_strong_suffix(shift, bpos, pat, m): #데이터 전처리\n","    i = m   # 패턴길이\n","    j = m + 1 # 패턴 길이 +1\n","    bpos[i] = j\n","    while i > 0:\n","        while j <= m and pat[i - 1] != pat[j - 1]:\n","            if shift[j] == 0:  #반복해서 shift 계산 방지\n","                shift[j] = j - i\n","            j = bpos[j]\n","        i -= 1 #i와 j를 1씩 감소\n","        j -= 1\n","        bpos[i] = j\n","def preprocess_case2(shift, bpos, pat, m): #데이터 전처리\n","    j = bpos[0]\n","    for i in range(m + 1):\n","        if shift[i] == 0: #반복해서 shift 방지\n","            shift[i] = j\n","        if i == j:  #index보다 뒤에 있어야하므로 다음 bpos로 이동\n","            j = bpos[j]\n","def search(T, P):\n","    k = 0\n","    n = len(T) # 텍스트 길이\n","    m = len(P)  # 패턴길이\n","    bpos = [0] * (m + 1) #패턴 으로 초기화\n","    shift = [0] * (m + 1) #시프트테이블 초기화\n","    preprocess_strong_suffix(shift, bpos, P, m) #데이터 전처리\n","    preprocess_case2(shift, bpos, P, m) #데이터 전처리\n","    while k <= n - m:\n","        j = m - 1\n","        while j >= 0 and P[j] == T[k + j]: #현재의 비교 위치 s+j에서부터 text와 pat을 비교\n","            j -= 1\n","        if j < 0:   #j가 0보다 작게되면 pattern과 일치하는  text를 찾음\n","            return k  #반환\n","            k += shift[0]\n","        else:\n","            k += shift[j + 1]#일치하지 않는 경우 shift배열을 이용하여 다음 비교 위치 이동\n","    return -1 #매칭 실패\n","             \n","  \n","\n","print(search(\"I_LOVE_BANANA_YOU_LIKE_APPLE_AND_MANGO\",\"APPLE\")) #23\n","print(search(\"I_LOVE_BANANA_YOU_LIKE_MANGO_AND_APPLE\",\"APPLE\")) #33\n","print(search(\"TTATAGATCTCGTATTCTTTTATAGATCTCCTATTCTT\",\"ACGT\"))  #-1\n","print(search(\"TTATAGATCTCGTATTCTTTTATAGATCTCCTATTCTT\",\"TATC\"))  #-1"],"metadata":{"id":"9zziflpNHPo8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652592123757,"user_tz":-540,"elapsed":304,"user":{"displayName":"안효준","userId":"15869666014845161131"}},"outputId":"3c70c368-2ac4-42b9-dd98-c439bf6d846c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["23\n","33\n","-1\n","-1\n"]}]},{"cell_type":"code","source":["#[문제 2]교재 7장 연습문제 11번 풀기.\n","def knapSack_dp(W,wt,val,n):\n","  A = [[0 for x in range(W+1)] for x in range(n+1)] #(n+1)(W+1)크기의 리스트 생성 및 초기화\n","\n","  for i in range(1,n+1):\n","    for w in range(1,W+1):\n","      if wt[i-1]>w: #i번째 물건이 배낭 용량을 초과하면\n","        A[i][w] = A[i-1][w] #i번째 물건을 제외한 남은 물건을 고려 \n","\n","      else :  #i번째 물건이 배낭 용량 이하라면\n","        valWith = val[i-1]+A[i-1][w-wt[i-1]]  #넣는 경우의 합\n","        valWithout = A[i-1][w]  #넣지 않는 경우의 합\n","        A[i][w] = max(valWith,valWithout) #그 중에서 더 큰 값 선택\n","  return A[n][W]  #최종 결과 반환\n","\n"," \n","def knapsack_mem(wt, val, W, n):\n","  A = [[0 for x in range(W+1)] for x in range(n+1)]# (n+1)(W+1)크기의 2차원 리스트 생성 및 초기화\n","  \n","  if n == 0 or W == 0:  #넣을 물건이 없거나 용량이 0인경우에는\n","      return 0  #0을 반환\n","\n","  if A[n][W] != 0: # 2차원 리스트의 값이 0이 아닐경우\n","      return  A[n][W] #리스트 반환\n"," \n","  if wt[n-1] <= W:  #물건의 용량이 전체 가방 용량보다 작을 경우\n","      A[n][W] = max(val[n-1] + knapsack_mem(wt, val, W-wt[n-1], n-1), knapsack_mem(wt, val, W, n-1))  #둘 중 큰 값을 선택\n","      return A[n][W]  #리스트 반환\n","\n","  elif wt[n-1] > W: #물건의 용량이 가방 용량보다 클 경우\n","      A[n][W] = knapsack_mem(wt, val, W, n-1) #용량의 개수를 줄임\n","      return A[n][W] #리스트 반환\n","\n","  \n","val = [60,100,190,120,200,150]\n","wt = [2,5,8,4,7,6]\n","W = 18\n","n = len(val)\n","\n","print(knapSack_dp(W,wt,val,n))\n","print(knapsack_mem(wt, val, W, n))  #메모이제이션\n","# 동적 계획법 : O(nW)\n","# 메모이제이션 : O(nW)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MQbSN_C4tXdi","executionInfo":{"status":"ok","timestamp":1652592281410,"user_tz":-540,"elapsed":424,"user":{"displayName":"안효준","userId":"15869666014845161131"}},"outputId":"e26d0aea-1d72-4094-9f65-0c4bb5cd27c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["510\n","510\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"Mw46uWWtt77e"},"execution_count":null,"outputs":[]}]}