{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"과제 11","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNyudM1sSu5KJlvICVkqtGC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lqpVHi8hHRRB","executionInfo":{"status":"ok","timestamp":1653225948284,"user_tz":-540,"elapsed":272,"user":{"displayName":"안효준","userId":"15869666014845161131"}},"outputId":"24ca7e2a-2068-46f8-d627-3810108b2f32"},"outputs":[{"output_type":"stream","name":"stdout","text":["0  50  45  20  35  INF  \n","25  0  10  15  20  INF  \n","INF INF 0  INF 30  INF  \n","10  60  50  0  15  INF  \n","INF INF 35  INF 0  INF  \n","INF INF 38  INF 3  0   \n","=====================\n","1 1 1 1 1 0  \n","1 1 1 1 1 0  \n","0 0 1 0 1 0  \n","1 1 1 1 1 0  \n","0 0 1 0 1 0  \n","0 0 1 0 1 1  \n"]}],"source":["import copy #깊은 복사를 위해 임포트\n","def floyd_warshall(vertex,W): #floyd-warshall 알고리즘\n","  vsize = len(vertex) #정점 개수\n","  D = copy.deepcopy(W)  #깊은 복사\n","  for k in range(vsize):  #정점 k를 추가할때\n","    for i in range(vsize):\n","      for j in range(vsize): #모든 D[i][j]를\n","        D[i][j] = min(D[i][j], D[i][k] + D[k][j]) # 길에 대해서 가장 작은 값\n","  printD(D) #행렬 D를 출력\n","  print(\"=====================\")\n","  printF(D) # 이행적 폐쇄를 보이기 위한 printF\n","\n","def printD(D): #행렬 D를 출력하는 함수\n","  vsize = len(D)  \n","  for i in range(vsize):\n","      for j in range(vsize):\n","          if(D[i][j] == INF):\n","              print(\"INF\", end=\" \")\n","          else:\n","              print(D[i][j], end=\"  \")\n","      print(\" \")\n","\n","def printF(D):  #이행적 폐쇄를 보이기 위한 printF\n","  vsize = len(D)\n","  for i in range(vsize):\n","      for j in range(vsize):\n","        if(D[i][j]==INF): #INF 즉, 연결되어 있지 않은 정점에 대해서\n","          print(\"0\", end =\" \")  #경로가 없으면 0\n","        else:\n","          print(\"1\", end =\" \") #경로가 있으면 1을 출력한다.\n","    \n","      print(\" \")\n","\n","\n","\n","INF = 9999 #INF를 9999로 \n","vertex = ['A','B','C','D','E','F']  #노드 A,B,C,D,E,F\n","weight=[ [0,50,45,20,INF,INF],  #인접 행렬을 통해 7장 18번 그래프 적용\n","         [INF,0,10,15,20,INF],\n","         [INF,INF,0,INF,30,INF,INF],\n","         [10,INF,INF,0,15,INF],\n","         [INF,INF,35,INF,0,INF],\n","         [INF,INF,INF,INF,3,0],\n","        ]\n","# vertex = ['A','B','C','D','E','F','G']  #노드 A,B,C,D,E,F,G\n","# weight=[ [0,7,INF,INF,3,10,INF],#인접 행렬을 통해 그림 7.16 그래프 적용\n","#           [7,0,4,10,2,6,INF],\n","#           [INF,4,0,2,INF,INF,INF],\n","#           [INF,10,2,0,11,9,4],\n","#           [3,2,INF,11,0,13,5],\n","#           [10,6,INF,9,13,0,INF],\n","#           [INF,INF,INF,4,5,INF,0]\n","#         ]\n","        \n","\n","\n","floyd_warshall(vertex,weight) #floyd_warshall 알고리즘"]},{"cell_type":"code","source":[""],"metadata":{"id":"RUNUlNeh3uR0"},"execution_count":null,"outputs":[]}]}