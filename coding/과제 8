{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"과제 8","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOhjfpeq4JOVtEdbTp835PC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import math\n","def merge(a, left, mid, right): #병합 정렬을 위한 함수\n","  k = left    #병합위한 인덱스\n","  i = left    #왼쪽 리스트\n","  j = mid + 1 #오른쪽 리스트\n","  while i <= mid and j <=right: #한 쪽 부분 리스트가 모두 처리 될 때까지 반복\n","    if a[i][1] <=a[j][1] :  #왼쪽이 더 작으면\n","      sorted[k] = a[i]\n","      i,k = i+1,k+1\n","    else :            #오른쪽이 더 작으면\n","      sorted[k] = a[j] \n","      j,k = j+1,k+1\n","  if i > mid:      #오른쪽이 남아 있으면\n","    sorted[k:k+right-j+1] = a[j:right+1]\n","  else:           #왼쪽이 남아 있으면\n","    sorted[k:k+mid-i+1] = a[i:mid+1]\n","  a[left:right+1] = sorted[left:right+1]\n","\n","def strip_closet(p,d):  # 띠 내에서 영역에서 d보다 작은 근접 쌍 찾기\n","  n = len(p)  #리스트 내 점의 수 \n","  d_min = d   #d_min을 d로 초기화\n","  for i in range(n): #y의 값의 최소 점부터\n","    j = i+1\n","    while j <n and (p[j][1]-p[i][1])<d_min: #d_min의 값보다 y값의 차가 작을 때까지\n","      dij = distance(p[i],p[j]) # p[i],p[j]의 거리를 구해서\n","      if dij < d_min :  #두개의 거리가 d_min보다 작으면\n","        d_min = dij     #갱신한다\n","      j+=1\n","  return d_min          #최종적으로 d_min을 반환\n","\n","def distance(p1,p2):  #두 접선의 거리를 구하는 함수\n","  return math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\n","\n","def closest_pair(p):\n","  n = len(p)    #점의 개수\n","  mindist = float(\"inf\")  #최근점  초기화\n","  for i in range(n-1):      #모든 쌍 계산\n","    for j in range(i+1,n):\n","      dist = distance(p[i],p[j])  #유클리드 거리 계산\n","      if dist < mindist:  #두개의 거리가 mindist보다 작으면\n","        mindist = dist    #갱신한다\n","  return mindist          #반환\n","\n","def closest_pair_dist(p,n):\n","  if n <= 3:  #n이 3이하이면\n","    p.sort(key = lambda pt:pt[1])\n","    return closest_pair(p)  #억지 기법 알고리즘\n","  mid = n//2              #중앙값을 찾음 p는 x로 정렬\n","  mid_x = p[mid][0]       #중앙점의 x좌표\n","  dl = closest_pair_dist(p[:mid], mid)  #슬라이스를 통해 dl계산\n","  dr = closest_pair_dist(p[mid:], n-mid)  #슬라이스를 통해 dr계산\n","  d = min(dl, dr)           # 둘중 짧은 거리\n","  merge(p,0,mid-1,n-1)      # y값으로 정렬\n","  pm = []                   # x좌표가 d이내인 점들 pm을 만든다.\n","  for i in range(n) :       #pm도 x에 대해 정렬\n","    if abs(p[i][0]-mid_x)<d:  #리스트로 만드만드는 과정\n","      pm.append(p[i])\n","  ds = strip_closet(pm,d) #pm내에서 d보다 작은 근접쌍  찾기\n","  return min(d,ds)    #근접쌍 거리 구하기\n","\n","\n","\n","p = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]\n","# p = [(1, 1), (1, 4), (4, 1), (4, 4), (1, 6)]\n","# p = [(2, 1),(2, 2), (3, 2)]\n","p.sort(key = lambda point : point[0]) #점들을 x순으로 정렬\n","sorted = [(0,0)]*len(p) #sorted 초기화\n","print(\"가장 가까운 두 점의 거리\", closest_pair_dist(p,len(p)))  #가장 가까운 두 점의 거리 출력\n","print(\"시간복잡도 : nlogn\")  #시간복잡도 : nlogn"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JBbeZCwRgPOK","executionInfo":{"status":"ok","timestamp":1651135125273,"user_tz":-540,"elapsed":349,"user":{"displayName":"안효준","userId":"15869666014845161131"}},"outputId":"d2a47e1c-2522-45f3-b6df-5da9ad587da0"},"execution_count":123,"outputs":[{"output_type":"stream","name":"stdout","text":["가장 가까운 두 점의 거리 2.0\n","시간복잡도 : nlogn\n"]}]},{"cell_type":"markdown","source":[""],"metadata":{"id":"yhu2jwUxi-4q"}}]}