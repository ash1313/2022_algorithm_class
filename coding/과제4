{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"과제4","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPnRT/TlKyG4AGSZMYLDfjk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DdO6VkJRP33R","executionInfo":{"status":"ok","timestamp":1648105744320,"user_tz":-540,"elapsed":3575,"user":{"displayName":"안효준","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15869666014845161131"}},"outputId":"26748abe-6870-4784-ed7c-9a9ae4779fed"},"outputs":[{"output_type":"stream","name":"stdout","text":["문자열을 입력하세요ADBAAEDBA\n","4\n","문자열을 입력하세요ADBAAEDBA\n","4\n"]}],"source":["# 입력으로 주어진 문자열에서 A로 시작하고 B로 끝나는 부분 문자열의 개수를 구하는 문제가 주어졌다. 예를 들어, 문자열 ADBAAEDBA에는 4개의 부분 문자열이 있다.\n","# ADB AAEDBA, ADBAAEDB A, ADB AAEDB A, ADBA AEDB A\n","# (1) 이 문제에 대한 억지 기법 알고리즘을 설계하고, 시간 복잡도를 계산하라\n","\n","s = input('문자열을 입력하세요') #문자열을 입력받는다.\n","n = len(s) #문자열의 개수를 n에 저장한다.\n","count = 0\n","\n","for i in range(n) : #문자열 개수 만큼 반복을 실행한다, \n","  if s[i] =='A' :  #문자열에서 'a'를 찾으면\n","    for j in range(i+1,n) : #그 다음것부터 반복한다.\n","      if s[j] =='B' : # 그러다 b를 찾게되면\n","        count = count + 1 #count의 값을 늘린다.\n","print(count) #count의 값을 출력한다.\n","#시간 복잡도 o(n^2)\n","\n","# (2) 이 문제에 대한 더 효율적인 알고리즘을 찾아보라.\n","\n","s = input('문자열을 입력하세요') #문자열을 입력받는다.\n","n = len(s)#문자열의 개수를 n에 저장한다.\n","count = 0\n","acount = 0\n","\n","for i in range(n) : #n번 만큼 반복한다.\n","  if s[i] =='A' : #만약 a가 나오면 \n","    acount = acount + 1 #a의 카운트를 증가 한다.\n","  if s[i] =='B' : #b가 나오게 된다면\n","    count = count + acount #a에 카운트를 증가했던걸 모두 더한다.\n","        \n","print(count) #count를 출력한다.\n","#시간 복잡도 o(n)"]},{"cell_type":"code","source":["# 이분 그래프는 정점의 집합을 두 개의 부분집합 X와 Y로 분할할 수 있고, 모든 간선의 한 끝점은 X에 다른 끝점은 Y에 속하도록 할 수 있는 그래프를 말한다. 예를 들어, 다음은 이분 그래프와 그렇지 않은 그래프의 예를 보여준다. 물음에 답하라.\n","# (1) 깊이 우선 탐색을 이용해 주어진 그래프가 이분 그래프인지를 판단하는 알고리즘을 설계하라.\n","\n","states = ['a','b','c','d','e','f','g','h']\n","g = [[0,1,0,1,0,1,0,0],\n","     [1,0,1,0,1,0,1,1],\n","     [0,1,0,1,0,1,0,1],\n","     [1,0,1,0,1,0,1,0],\n","     [0,1,0,1,0,1,0,1],\n","     [1,0,1,0,1,0,1,0],\n","     [0,0,0,1,0,1,0,1],\n","     [0,0,1,0,1,0,1,0],\n","    ]\n","    #인접행렬 g\n","    #len(g) = 8\n","\n","g1 = [[0,1,1,1],\n","     [1,0,1,0],\n","     [1,1,0,1],\n","     [1,0,1,0],\n","    ]\n","    #인접행렬 g1\n","    #len(g1) = 4\n","\n","g2 = [[0,1,1,1,0],\n","     [1,0,1,0,1],\n","     [1,1,0,1,0],\n","     [1,0,1,0,1],\n","    ]\n","    #인접행렬 g2\n","    #len(g1) = 5    \n","\n","def isSafe(g, val, c, color) : # g:그래프, val: 몇번째 노드인지 확인, c: 색깔, color: 색깔 리스트\n","  for i in range(len(g)): #그래프의 모든 노드 i에 대해서\n","    if g[val][i] == 1 and color[i] == c :#인접하고, 색깔이 같다면\n","      return False  #칠할 수 없는 색으로 false를 반환하고\n","  return True # 인접하지 않고 색깔이 같지 않다면 True를 반환한다.\n","\n","def DFS_graph_coloring(graph, k, val, color) : #dfs를 이용하여 그래프를 색칠한다.\n","  if val == len(graph) :  #val의 값과 그래프의 개수 값이 같다면 모두 칠했으므로\n","    return True         #True를 반환한다.\n","\n","  for c in range(1,k+1):  #1 ~ k에 대해서 모든 수를 칠해본다.\n","    if isSafe(graph,val,c,color) :  # v를 c로 칠할 수 있는지 확인하는 함수\n","      color[val] = c  #color 그래프에 색을 칠한다.\n","      if DFS_graph_coloring(graph, k, val+1, color): # val를 계속해서 늘려(a,b,c...) 재귀적으로 확인하여 True이면.\n","        return True # True를 반환한다.\n","      color[val] = 0 #그렇지 않다면 다른 색을 칠한다.\n","  return False # 모든 색을 칠하지 못했다면 색칠을 실패한다.\n","\n","def graphColouring(graph, k, states) : #색칠 함수 매개 변수 : graph :인접행렬, k : 색깔 수, states: 정점(노드) 리스트\n","  color = [0] * len(graph) #그래프의 색을 모두 0(초기 상태로) 초기화시킨다.\n","  print(color)\n","  check = DFS_graph_coloring(graph, k, 0, color) # 이분그래프인지 확인하는 함수 graph: 인접행렬, k: 색깔수 , 0: 0번째 노드부터 처리, color: 초기화된 색칠 그래프\n","  if check : #만약 check이 ture 이면\n","    print(\"이분 그래프이다.\")\n","  else :  #그렇지 않다면\n","    print(\"이분 그래프가 아니다.\")\n","\n","print(\"case1\")\n","graphColouring(g,2,states) #g에 대한 색칠 함수 실행\n","print(\" \")\n","print(\"case2\")\n","graphColouring(g1,2,states)#g1에 대한 색칠 함수 실행\n","print(\" \")\n","print(\"case3\")\n","graphColouring(g2,2,states)#g2에 대한 색칠 함수 실행"],"metadata":{"id":"Ua0AdJIgQocq","executionInfo":{"status":"ok","timestamp":1648111036298,"user_tz":-540,"elapsed":398,"user":{"displayName":"안효준","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15869666014845161131"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"022f34c7-a911-4925-f29e-d8baafdb87bc"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["case1\n","[0, 0, 0, 0, 0, 0, 0, 0]\n","이분 그래프이다.\n"," \n","case2\n","[0, 0, 0, 0]\n","이분 그래프가 아니다.\n"," \n","case3\n","[0, 0, 0, 0]\n","이분 그래프가 아니다.\n"]}]}]}