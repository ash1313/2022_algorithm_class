{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"과제5","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP11oLr/TRZAZISSPU6UuhH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Q7vI-SUDsJY8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648713776272,"user_tz":-540,"elapsed":269,"user":{"displayName":"안효준","userId":"15869666014845161131"}},"outputId":"58bbe450-bc0d-4984-ee13-a22df030b866"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original :  [5, 3, 8, 4, 9, 1, 6, 2, 7]\n"," Step  1 = [3, 5, 8, 4, 9, 1, 6, 2, 7]\n"," Step  2 = [3, 5, 8, 4, 9, 1, 6, 2, 7]\n"," Step  3 = [3, 4, 5, 8, 9, 1, 6, 2, 7]\n"," Step  4 = [3, 4, 5, 8, 9, 1, 6, 2, 7]\n"," Step  5 = [1, 3, 4, 5, 8, 9, 6, 2, 7]\n"," Step  6 = [1, 3, 4, 5, 6, 8, 9, 2, 7]\n"," Step  7 = [1, 2, 3, 4, 5, 6, 8, 9, 7]\n"," Step  8 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n","Insertion :  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n","\n","\n","Original :  [5, 3, 8, 4, 9, 1, 6, 2, 7]\n"," Step  1 = [3, 5, 8, 4, 9, 1, 6, 2, 7]\n"," Step  2 = [3, 5, 8, 4, 9, 1, 6, 2, 7]\n"," Step  3 = [3, 4, 5, 8, 9, 1, 6, 2, 7]\n"," Step  4 = [3, 4, 5, 8, 9, 1, 6, 2, 7]\n"," Step  5 = [1, 3, 4, 5, 8, 9, 6, 2, 7]\n"," Step  6 = [1, 3, 4, 5, 6, 8, 9, 2, 7]\n"," Step  7 = [1, 2, 3, 4, 5, 6, 8, 9, 7]\n"," Step  8 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n","Insertion :  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"]}],"source":["# 삽입정렬을 상향식과 하향식으로 구현하고 테스트할 것\n","\n","# 삽입 정렬 상향식\n","\n","data1 = [5,3,8,4,9,1,6,2,7]\n","data2 = [5,3,8,4,9,1,6,2,7]\n","def printStep(arr, val) :   #step을 출력하기 위한 함수\n","    print(\" Step %2d = \" % val, end='')\n","    print(arr)\n","\n","def insertion_sort(A) : #상향식 삽입 정렬 함수\n","  n = len(A)            # 데이터의 개수를 n에 저장한다.\n","  for i in range(1,n) : # 1부터 n-1까지 반복하고\n","    key = A[i]          # a[i]값을 key값에 저장한다.\n","    j = i - 1           # a[i-1]부터 검사를 시작한다.\n","    while j >= 0 and A[j] > key : # i-1이 0보다 크거나 같거나 key값보다 크면\n","        A[j+1] = A[j]           #오른쪽으로 한칸씩 이동한다.\n","        j = j - 1              #j의 위치를 왼쪽으로 이동한다.\n","    A[j+1] = key              #a[i]를 위치에 삽입한다.\n","    printStep(A,i)            #step을 출력하기 위한 함수를 출력한다.\n","\n","# 삽입 정렬 하향식\n","n = len(data2)   #데이터 2의 개수를 n에 저장한다.       \n","def insertion_sort2(A,n) :  #하향식 삽입 정렬 함수\n","  if n == 1 : return    #만약 n이 1이면 리턴한다.\n","  insertion_sort2(A, n-1) # 재귀적으로 n을 1씩 줄여가는 재귀함수를 호출한다.\n","  key = A[n-1]        #a[n] 값을 key에 저장한다.\n","  j = n-2             # a[n-1]부터 검사를 시작한다.\n","  while j>=0 and A[j] > key : #조건을 통한 내부 순환 루프\n","      A[j+1] = A[j] #오른쪽으로 한칸씩 이동한다.\n","      j = j - 1     #j의 위치를 왼쪽으로 이동한다.\n","  A[j+1] = key      #a[i]를 위치에 삽입한다.\n","  printStep(A,n-1)  #step을 출력하기 위한 함수를 출력한다.\n","\n","print(\"Original : \", data1)\n","insertion_sort(data1)\n","print(\"Insertion : \", data1)\n","\n","print(\"\\n\")\n","\n","print(\"Original : \", data2)\n","insertion_sort2(data2,n)\n","print(\"Insertion : \", data2)"]},{"cell_type":"code","source":["# 위상 정렬을 두 가지 방법으로 구현하고 테스트할 것\n","mygraph ={\"A\" : {\"C\", \"D\"},\n","          \"B\":  {\"D\", \"E\"},\n","          \"C\":  {\"D\", \"F\"},\n","          \"D\" : {\"F\"},\n","          \"E\" : {\"F\"},\n","          \"F\" : {},\n","        }\n","\n","mygraph1 = {\n","          \"A\" : {\"B\",\"D\", \"E\"},\n","          \"B\":  {\"E\",\"F\",\"C\"},\n","          \"C\":  {\"G\"},\n","          \"D\" : {\"E\"},\n","          \"E\" : {},\n","          \"F\" : {\"G\"},\n","          \"G\" : {},\n","        }\n","\n","\n","mygraph2 = {\n","          \"A\" : {\"B\",\"C\"},\n","          \"B\":  {\"D\"},\n","          \"C\":  {\"D\",\"E\"},\n","          \"D\" : {\"F\"},\n","          \"E\" : {\"H\",\"G\"},\n","          \"F\" : {},\n","          \"G\" : {\"H\"},\n","          \"H\" : {\"C\"},          \n","        }        #사이클이 있어 위상정렬이 불가능\n","\n","\n","# 위상 정렬(축소 정복 기법)\n","def topological_sort(graph) :\n","  inDeg = {}  #정점과 진입차수를 저장하는 딕셔너리\n","  for v in graph : # 그래프 모든 정점을\n","    inDeg[v] = 0   # 0으로 초기화한다.\n","  for v in graph :  #모든 정점 v에 대해서\n","    for u in graph[v] : #v에 인접한 모든 정점 u에 대해서 \n","      inDeg[u] += 1     #진입차수를 1증가시킨다.\n","\n","  vlist =[]             #진입차수가 0인 정점리스트를 생성한다.\n","  for v in graph :      # 모든 정점 v에 대해서\n","    if inDeg[v] ==0:    #진입 차수가 0이면\n","      vlist.append(v)   #vlist에 추가한다.\n","\n","  while vlist :         #리스트가 공백이 아닐때까지\n","    v = vlist.pop()     #진입차수가 0인 정점을 하나 꺼낸다.\n","    print(v, end = '')  #한줄로 화면에 출력한다.\n","\n","    for u in graph[v] : #연결된 모든 정점에 대해서\n","      inDeg[u] -= 1     #진입차수를 감소시킨다.\n","      if inDeg[u] == 0: #진입 차수가 0이면 vlist에 추가한다.\n","        vlist.append(u) #u의 진입차수가 0으로 줄어들면 vlist에 u를 추가한다.\n","\n","\n","\n","print('topological_sort : ')\n","topological_sort(mygraph) # 축소정복 기법을 이용한 sort\n","print(\"\\n\")\n","topological_sort(mygraph1)\n","print(\"\\n\")\n","topological_sort(mygraph2)\n","print(\"\\n\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VEmagQC3IoJU","executionInfo":{"status":"ok","timestamp":1648819254104,"user_tz":-540,"elapsed":292,"user":{"displayName":"안효준","userId":"15869666014845161131"}},"outputId":"46d487df-da08-4c8d-e16d-802b7fea2f4c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["topological_sort : \n","BEACDF\n","\n","ABCFGDE\n","\n","AB\n","\n"]}]},{"cell_type":"code","source":["# DFS 기반 위상 정렬 알고리즘\n","mygraph ={\"A\" : {\"C\", \"D\"},\n","          \"B\":  {\"D\", \"E\"},\n","          \"C\":  {\"D\", \"F\"},\n","          \"D\" : {\"F\"},\n","          \"E\" : {\"F\"},\n","          \"F\" : set(),\n","        }\n","\n","mygraph1 = {\n","          \"A\" : {\"B\",\"D\", \"E\"},\n","          \"B\":  {\"E\",\"F\",\"C\"},\n","          \"C\":  {\"G\"},\n","          \"D\" : {\"E\"},\n","          \"E\" : set(),\n","          \"F\" : {\"G\"},\n","          \"G\" : set(),\n","        }\n","\n","\n","mygraph2 = {\n","          \"A\" : {\"B\",\"C\"},\n","          \"B\":  {\"D\"},\n","          \"C\":  {\"D\",\"E\"},\n","          \"D\" : {\"F\"},\n","          \"E\" : {\"H\",\"G\"},\n","          \"F\" : set(),\n","          \"G\" : {\"H\"},\n","          \"H\" : {\"C\"},          \n","        }  #사이클이 있어 위상정렬이 불가능\n","\n","def dfs_sort(graph) :\n","  inDeg = {}  #정점과 진입차수를 저장하는 딕셔너리\n","  for v in graph : # 그래프 모든 정점을\n","    inDeg[v] = 0   # 0으로 초기화한다.\n","  for v in graph :  #모든 정점 v에 대해서\n","    for u in graph[v] : #v에 인접한 모든 정점 u에 대해서 \n","      inDeg[u] += 1     #진입차수를 1증가시킨다.\n","  visited = set()       #set 함수를 선언한다.\n","  ans = []              #ans라는 배열을 만든다.\n","  for v in graph :      # 모든 정점 v에 대해서\n","    if inDeg[v] == 0:    #진입 차수가 0이면\n","      dfs(graph, v, visited,ans) #깊이 우선탐색을 진행한다.\n","  ans.reverse()                 #배열을 뒤집는다.\n","  print(ans)                    #ans를 출력한다.\n","\n","\n","def dfs(graph,start,visited, ans) : #깊이 우선 탐색\n","  if start not in visited :        # start가 방문하지 않은 노드이면\n","    visited.add(start)             # start를 방문한 노드 집합에 추가한다.\n","    nbr = graph[start] - visited   # 차집합을 이용한 연산\n","    for v in nbr :                 # 차집합 까지\n","      dfs(graph, v, visited, ans)   # dfs에 대해 순환 호출\n","    ans.append(start)              # start의 값을 ans에 저장한다.\n","\n","print('dfs_sort : ')\n","dfs_sort(mygraph) \n","print(\"\\n\")\n","dfs_sort(mygraph1)\n","print(\"\\n\")\n","dfs_sort(mygraph2)\n","print(\"\\n\")"],"metadata":{"id":"kJcPlo3_L_5A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648981893896,"user_tz":-540,"elapsed":266,"user":{"displayName":"안효준","userId":"15869666014845161131"}},"outputId":"d20ebf03-d0d7-42be-cebe-5a4eecb394f1"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["dfs_sort : \n","['B', 'E', 'A', 'C', 'D', 'F']\n","\n","\n","['A', 'B', 'C', 'F', 'G', 'D', 'E']\n","\n","\n","['A', 'C', 'E', 'G', 'H', 'B', 'D', 'F']\n","\n","\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"Q1JxVm9dsUQR"},"execution_count":null,"outputs":[]}]}