{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"과제9","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO5LyQQ/BRlSq6Mtjmy6SSX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":39,"metadata":{"id":"_q310qFpRRXQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652004256660,"user_tz":-540,"elapsed":294,"user":{"displayName":"안효준","userId":"15869666014845161131"}},"outputId":"1d3eaafb-9b1c-478b-e2fd-33772c8f29cd"},"outputs":[{"output_type":"stream","name":"stdout","text":["['The', 'string', 'index', 'out', 'of', 'range', 'means', 'that', 'the', 'index', 'you', 'are', 'trying', 'to', 'access', 'does', 'not', 'exist.', 'In', 'a', 'string,', 'that', 'means', \"you're\", 'trying', 'to', 'get', 'a', 'character', 'from', 'the', 'string', 'at', 'a', 'given', 'point.', 'If', 'that', 'given', 'point', 'does', 'not', 'exist', ',', 'then', 'you', 'will', 'be', 'trying', 'to', 'get', 'a', 'character', 'that', 'is', 'not', 'inside', 'of', 'the', 'string']\n","[',', 'a', 'a', 'a', 'a', 'access', 'are', 'at', 'be', 'character', 'character', 'does', 'does', 'exist', 'exist.', 'from', 'get', 'get', 'given', 'given', 'If', 'In', 'index', 'index', 'inside', 'is', 'means', 'means', 'not', 'not', 'not', 'of', 'of', 'out', 'point', 'point.', 'range', 'string', 'string', 'string', 'string,', 'that', 'that', 'that', 'that', 'The', 'the', 'the', 'the', 'then', 'to', 'to', 'to', 'trying', 'trying', 'trying', 'will', 'you', 'you', \"you're\"]\n"]}],"source":["#[문제] 교재 6장 연습문제 문제 7번 풀기.\n","from queue import Queue\n","BUCKETS = 256 # 버킷 수\n","DIGITS = 20 #최대 자리수\n","\n","\n","def radix_sort(A): # 기수 정렬 알고리즘\n","    queues = []  # 큐의 리스트\n","    for i in range(BUCKETS): # i부터 buskets-1 만큼 반복\n","        queues.append(Queue()) # Buckets개의 큐 사용\n","    n = len(A) # A의 개수는 n개\n","    pos = DIGITS - 1 # pos는 자리 수 -1\n","    while pos >= 0: # pos가 0보다 크거나 같을 때 \n","        for i in range(n): # i부터 n-1만큼\n","            b = 0 \n","            if len(A[i]) > pos: # 만약 개수가 더 크다면\n","                if(ord(A[i][pos])>=ord('A') and ord(A[i][pos])<=ord('Z')): # 대문자가 나올때\n","                  b = ord(A[i][pos])+ 32 # 아스키 코드값\n","                else: #소문자가 나올 때\n","                  b = ord(A[i][pos]) # 아스키 코드값\n","            queues[b].put(A[i])  # 큐에 입력\n","        j = 0\n","        for b in range(BUCKETS): #버킷에서 꺼내서 \n","            while not queues[b].empty(): # 빌때까지\n","                A[j] = queues[b].get() #숫자 삽입\n","                j += 1\n","        pos-=1 # pos는 1씩 줄임\n","\n","infile = open(\"sample.txt\", \"r\") #파일 샘플 1\n","# infile = open(\"sample2.txt\", \"r\") #파일 샘플 2\n","words = infile.read().split() # 단어 쪼개기\n","infile.close() #파일 닫기\n","\n","print(words)\n","radix_sort(words) #함수 실행\n","print(words)\n","\n","\n"]}]}